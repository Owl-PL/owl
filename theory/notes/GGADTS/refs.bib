@InProceedings{Ghani:2004,
author="Ghani, Neil
and Uustalu, Tarmo
and Vene, Varmo",
editor="Chin, Wei-Ngan",
title="Build, Augment and Destroy, Universally",
booktitle="Programming Languages and Systems",
year="2004",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="327--347",
abstract="We give a semantic footing to the fold/build syntax of programming with inductive types, covering shortcut deforestation, based on a universal property. Specifically, we give a semantics for inductive types based on limits of algebra structure forgetting functors and show that it is equivalent to the usual initial algebra semantics. We also give a similar semantic account of the augment generalization of build and of the unfold/destroy syntax of coinductive types.",
isbn="978-3-540-30477-7"
}

@InProceedings{Johann:2007,
author="Johann, Patricia
and Ghani, Neil",
editor="Della Rocca, Simona Ronchi",
title="Initial Algebra Semantics Is Enough!",
booktitle="Typed Lambda Calculi and Applications",
year="2007",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="207--222",
abstract="Initial algebra semantics is a cornerstone of the theory of modern functional programming languages. For each inductive data type, it provides a fold combinator encapsulating structured recursion over data of that type, a Church encoding, a build combinator which constructs data of that type, and a fold/build rule which optimises modular programs by eliminating intermediate data of that type. It has long been thought that initial algebra semantics is not expressive enough to provide a similar foundation for programming with nested types. Specifically, the folds have been considered too weak to capture commonly occurring patterns of recursion, and no Church encodings, build combinators, or fold/build rules have been given for nested types. This paper overturns this conventional wisdom by solving all of these problems.",
isbn="978-3-540-73228-0"
}