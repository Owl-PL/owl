embed
    {{tex-preamble        
    }}
metavar termvar,    x, y, z, w, f  ::=
indexvar indices,   m, n, k, i, j ::=

grammar

K :: 'kinds_' ::= {{com Kinds}}
  | Type     :: :: Type
  | K1 -> K2 :: :: TArrow

A, B, C, D, T :: 'types_' ::= {{com Types}}
  | x                                  :: :: Var
  | function x : K { T }                        :: :: TFun
  | A B                               :: :: TApp
  | Top K                              :: :: Top
  | A -> B                           :: :: Arrow
  | Forall ( x <= A ) . B              :: :: Forall
  | Some ( x <= A ) . B                :: :: Some
  | Record { x1 : T1 , ... , xi : Ti } :: :: TRecord  

t :: 'terms_' ::= {{com Terms }}
  | x                                  :: :: Var
  | function x : T { t }               :: :: Fun
  | function x : K { t }               :: :: TFun
  | t1 t2                              :: :: App
  | t T                                :: :: TApp
  | pack ( T1 , e ) T2                 :: :: Pack  
  | let ( A , x ) = t1 in t2           :: :: Unpack
  | record { x1 = t1 , ... , xi = ti } :: :: Record
  | t . x                              :: :: FieldSelection

G {{tex \Gamma }} :: 'contexts_' ::= {{com Contexts }}
  | empty       ::   :: Empty
  | G , x : T   ::   :: VarExt
  | G , x <= T  ::   :: TVarExt
  | x : T       :: M :: Var
  | x <= T      :: M :: TVar
  | G1 , G2     :: M :: Concat

terminals :: 'terminal_' ::=
  | class     :: :: class
  {{tex \mathsf{Class} }}
  | ->        :: :: RArrow
  {{tex \to }}
  | <=        :: :: Leq
  {{tex \leq }}
  | empty     :: :: Empty
  {{tex \emptyset }}
  | Type      :: :: Type
  {{tex \mathsf{Type} }}
  | Top       :: :: Top
  {{tex \mathsf{Top} }}
  | Forall    :: :: Forall
  {{tex \mathsf{Forall} }}
  | Some      :: :: Some
  {{tex \mathsf{Some} }}
  | Record    :: :: Record
  {{tex \mathsf{Record} }}
  | Function  :: :: Function
  {{tex \mathsf{function} }}
  | pack      :: :: Pack
  {{tex \mathsf{Pack} }}
  | let       :: :: let
  {{tex \mathsf{let} }}
  | in        :: :: in
  {{tex \mathsf{in} }}
  | forall    :: :: MForall
  {{tex \forall }}
  | subseteq  :: :: Subseteq
  {{tex \subseteq }}

dotvar :: 'dotvar_' ::=
  | x1 , ... , xi :: :: Dotvar

formula :: 'formula_' ::=
    | judgement1                        ::   :: judgement
    | judgement1 , ... , judgementi     ::   :: judgementM
    | formula1 && formula2              ::   :: Quad
    | forall x = y , formula            :: M :: Forall
    | ( formula )                       :: S :: parens
    {{tex [[formula]] }}
    | { dotvar1 } subseteq { dotvar2 }   :: M :: SSL

defns
  Judgments :: '' ::=

defn 
  G |- :: :: validctx :: 'C_'
  {{com Valid Contexts }}
by  

  --------- :: Empty
  empty |- 

  G |- T : K
  ------------ :: TVar
  G, x <= T |-

  G |- T : Type
  ------------- :: TVar
  G, x : T |-

defn 
  G |- T : K :: :: kinding :: 'K_'
  {{com Kind Checking }}
by  

  G |- T : K
  ------------------ :: TVar
  G, x <= T |- x : K

  G, x <= Top K1 |- T2 : K2
  -------------------------------------- :: FunI
  G |- function x : K1 { T2 } : K1 -> K2
  
  G |- A : K1 -> K2  &&  G |- B : K1
  ---------------------------------- :: FunE
  G |- A B : K2

  G |- 
  -------------- :: Top
  G |- Top K : K

  G |- A : Type && G |- B : Type
  ------------------------------ :: Arrow
  G |- A -> B : Type

  G, x <= A |- B : Type
  ------------------------------- :: Forall
  G |- Forall (x <= A) . B : Type

  G, x <= A |- B : Type
  ----------------------------- :: Some
  G |- Some (x <= A) . B : Type

  G |-  
  G |- T1 : Type , ... , G |- Ti : Type
  ---------------------------------------------- :: Record
  G |- Record { x1 : T1 , ... , xi : Ti } : Type

defn
  G |- A <= B :: :: subtyping :: 'S_'
  {{com Subtyping }}
by  

  B <~> C
  G |- A <= B && G |- C : K
  ------------------------- :: Conv
  G |- A <= C

  G, x <= A |-   
  ------------------- :: TVar
  G, x <= A |- x <= A

  G |- A : K
  ---------- :: Refl
  G |- A <= A

  G |- A <= B && G |- B <= C
  -------------------------- :: Trans
  G |- A <= C

  G |- A : K && G |- Top K1 : K
  ----------------------------- :: Top
  G |- A <= Top K1

  G |- A -> B : Type
  G |- C <= A && G |- B <= D
  -------------------------- :: Arrow
  G |- A -> B <= C -> D

  G |- Forall(x <= A).B : Type
  G |- C <= A && G, x <= C |- B <= D
  --------------------------------------------- :: Forall
  G |- Forall (x <= A) . B <= Forall (x <= C).D

  G |- Some(x <= A).B : Type
  G |- A <= C && G, x <= C |- B <= D
  --------------------------------------------- :: Some
  G |- Some (x <= A) . B <= Some (x <= C).D  

  {y1 , ... , yn} subseteq {x1 , ... , xm}
  forall xi = yj, G |- Ai <= Bj
  G |- Record {x1 : A1 , ..., xm : Am } : Type
  ----------------------------------------------------------------- :: Record
  G |- Record {x1 : A1,...,xm : Am} <= Record {y1 : B1,...,yn : Bn}

  G, x <= Top K |- A <= B
  ------------------------------------------------- :: Fun
  G |- function x : K { A } <= function x : K { B }

  G |- A <= B && G |- A C : K
  --------------------------- :: App
  G |- A C <= B C

defn 
  G |- t : T :: :: typing :: 'T_'
  {{com Type Checking }}
by

  G |- t : A && G |- A <= B
  ------------------------- :: Sub
  G |- t : B

  G, x : A |-
  ----------------- :: Var
  G, x : A |- x : A

  G, x : A |- t : B
  ---------------------------------- :: Arrow
  G |- function x : A { t } : A -> B

defn
  A ~> B :: :: red :: 'R_'
  {{com Reduction }}
by

defn
  A <~> B :: :: beq :: 'BEq_'
  {{com $\beta$-equality }}
by
   A ~> B && B ~> A
   ---------------- :: Eq
   A <~> B